{"mappings":"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","sources":["<anon>","public/script.js"],"sourcesContent":["document.addEventListener('DOMContentLoaded', ()=>{\n    const segmentsContainer = document.getElementById('segments-container');\n    const applyButton = document.getElementById('apply-filters');\n    let allSegments = [];\n    // Pace string \"M:SS\" to seconds\n    const paceToSeconds = (pace)=>{\n        if (!pace || typeof pace !== 'string') return Infinity;\n        const parts = pace.split(':');\n        if (parts.length !== 2) return Infinity;\n        return parseInt(parts[0], 10) * 60 + parseInt(parts[1], 10);\n    };\n    const renderSegments = (segments)=>{\n        segmentsContainer.innerHTML = '';\n        segments.filter(Boolean).forEach((segment)=>{\n            const segmentElement = document.createElement('div');\n            segmentElement.classList.add('col-md-4', 'mb-4');\n            const card = document.createElement('div');\n            card.classList.add('card', 'h-100');\n            const cardBody = document.createElement('div');\n            cardBody.classList.add('card-body');\n            const nameElement = document.createElement('h5');\n            nameElement.classList.add('card-title');\n            const nameLink = document.createElement('a');\n            nameLink.href = `https://www.strava.com/segments/${segment.id}`;\n            nameLink.target = '_blank';\n            nameLink.textContent = segment.name;\n            nameElement.appendChild(nameLink);\n            cardBody.appendChild(nameElement);\n            const idElement = document.createElement('p');\n            idElement.classList.add('card-text');\n            const idLink = document.createElement('a');\n            idLink.href = `https://www.strava.com/segments/${segment.id}`;\n            idLink.target = '_blank';\n            idLink.textContent = `ID: ${segment.id}`;\n            idElement.appendChild(idLink);\n            cardBody.appendChild(idElement);\n            const distanceElement = document.createElement('p');\n            distanceElement.classList.add('card-text');\n            const distanceInKm = (parseFloat(segment.distance) / 1000).toFixed(2);\n            distanceElement.textContent = `Distance: ${distanceInKm} km`;\n            cardBody.appendChild(distanceElement);\n            const attemptsElement = document.createElement('p');\n            attemptsElement.classList.add('card-text');\n            attemptsElement.textContent = `Attempts: ${segment.attempts.attempts} by ${segment.attempts.people} people`;\n            cardBody.appendChild(attemptsElement);\n            const leaderboardTitle = document.createElement('h6');\n            leaderboardTitle.classList.add('card-subtitle', 'mb-2', 'text-muted');\n            leaderboardTitle.textContent = 'Leaderboard';\n            cardBody.appendChild(leaderboardTitle);\n            const leaderboardElement = document.createElement('ul');\n            leaderboardElement.classList.add('list-group', 'list-group-flush');\n            segment.leaderboard.forEach((entry)=>{\n                const leaderboardItem = document.createElement('li');\n                leaderboardItem.classList.add('list-group-item');\n                leaderboardItem.textContent = `${entry.position}. ${entry.time} (${entry.pace}/km)`;\n                leaderboardElement.appendChild(leaderboardItem);\n            });\n            cardBody.appendChild(leaderboardElement);\n            card.appendChild(cardBody);\n            segmentElement.appendChild(card);\n            segmentsContainer.appendChild(segmentElement);\n        });\n    };\n    const applyFiltersAndSorting = ()=>{\n        let filteredSegments = [\n            ...allSegments\n        ];\n        // Filter values\n        const minDistance = parseFloat(document.getElementById('min-distance').value) || 0;\n        const maxDistance = parseFloat(document.getElementById('max-distance').value) || Infinity;\n        const minAttempts = parseInt(document.getElementById('min-attempts').value, 10) || 0;\n        const maxAttempts = parseInt(document.getElementById('max-attempts').value, 10) || Infinity;\n        const minPeople = parseInt(document.getElementById('min-people').value, 10) || 0;\n        const maxPeople = parseInt(document.getElementById('max-people').value, 10) || Infinity;\n        const minFirstPace = parseFloat(document.getElementById('min-leaderboard-first').value) || 0;\n        const maxFirstPace = parseFloat(document.getElementById('max-leaderboard-first').value) || Infinity;\n        const minLastPace = parseFloat(document.getElementById('min-leaderboard-last').value) || 0;\n        const maxLastPace = parseFloat(document.getElementById('max-leaderboard-last').value) || Infinity;\n        filteredSegments = filteredSegments.filter((segment)=>{\n            const distanceInKm = parseFloat(segment.distance) / 1000;\n            const firstPace = paceToSeconds(segment.leaderboard[0]?.pace);\n            const lastPace = paceToSeconds(segment.leaderboard[segment.leaderboard.length - 1]?.pace);\n            return distanceInKm >= minDistance && distanceInKm <= maxDistance && segment.attempts.attempts >= minAttempts && segment.attempts.attempts <= maxAttempts && segment.attempts.people >= minPeople && segment.attempts.people <= maxPeople && firstPace >= minFirstPace && firstPace <= maxFirstPace && lastPace >= minLastPace && lastPace <= maxLastPace;\n        });\n        // Sort values\n        const sortBy = document.getElementById('sort-by').value;\n        const sortOrder = document.getElementById('sort-order').value;\n        filteredSegments.sort((a, b)=>{\n            let valA, valB;\n            switch(sortBy){\n                case 'distance':\n                    valA = parseFloat(a.distance);\n                    valB = parseFloat(b.distance);\n                    break;\n                case 'attempts':\n                    valA = a.attempts.attempts;\n                    valB = b.attempts.attempts;\n                    break;\n                case 'people':\n                    valA = a.attempts.people;\n                    valB = b.attempts.people;\n                    break;\n                case 'leaderboard-speed':\n                    valA = paceToSeconds(a.leaderboard[0]?.pace);\n                    valB = paceToSeconds(b.leaderboard[0]?.pace);\n                    break;\n                case 'name':\n                default:\n                    valA = a.name.toLowerCase();\n                    valB = b.name.toLowerCase();\n                    break;\n            }\n            if (valA < valB) return sortOrder === 'asc' ? -1 : 1;\n            if (valA > valB) return sortOrder === 'asc' ? 1 : -1;\n            return 0;\n        });\n        renderSegments(filteredSegments);\n    };\n    const localSegments = getSegmentsFromLocalFile();\n    allSegments = localSegments.filter(Boolean).filter((x)=>x?.attempts && Array.isArray(x?.leaderboard));\n    renderSegments(allSegments);\n    applyButton.addEventListener('click', applyFiltersAndSorting);\n});\n\n//# sourceMappingURL=public.84b96e35.js.map\n","\ndocument.addEventListener('DOMContentLoaded', () => {\n    const segmentsContainer = document.getElementById('segments-container');\n    const applyButton = document.getElementById('apply-filters');\n\n\n\n\n    let allSegments = [];\n\n    // Pace string \"M:SS\" to seconds\n    const paceToSeconds = (pace) => {\n        if (!pace || typeof pace !== 'string') return Infinity;\n        const parts = pace.split(':');\n        if (parts.length !== 2) return Infinity;\n        return parseInt(parts[0], 10) * 60 + parseInt(parts[1], 10);\n    };\n\n    const renderSegments = (segments) => {\n        segmentsContainer.innerHTML = '';\n        segments.filter(Boolean).forEach(segment => {\n            const segmentElement = document.createElement('div');\n            segmentElement.classList.add('col-md-4', 'mb-4');\n\n            const card = document.createElement('div');\n            card.classList.add('card', 'h-100');\n\n            const cardBody = document.createElement('div');\n            cardBody.classList.add('card-body');\n\n            const nameElement = document.createElement('h5');\n            nameElement.classList.add('card-title');\n            const nameLink = document.createElement('a');\n            nameLink.href = `https://www.strava.com/segments/${segment.id}`;\n            nameLink.target = '_blank';\n            nameLink.textContent = segment.name;\n            nameElement.appendChild(nameLink);\n            cardBody.appendChild(nameElement);\n\n            const idElement = document.createElement('p');\n            idElement.classList.add('card-text');\n            const idLink = document.createElement('a');\n            idLink.href = `https://www.strava.com/segments/${segment.id}`;\n            idLink.target = '_blank';\n            idLink.textContent = `ID: ${segment.id}`;\n            idElement.appendChild(idLink);\n            cardBody.appendChild(idElement);\n\n            const distanceElement = document.createElement('p');\n            distanceElement.classList.add('card-text');\n            const distanceInKm = (parseFloat(segment.distance) / 1000).toFixed(2);\n            distanceElement.textContent = `Distance: ${distanceInKm} km`;\n            cardBody.appendChild(distanceElement);\n\n            const attemptsElement = document.createElement('p');\n            attemptsElement.classList.add('card-text');\n            attemptsElement.textContent = `Attempts: ${segment.attempts.attempts} by ${segment.attempts.people} people`;\n            cardBody.appendChild(attemptsElement);\n\n            const leaderboardTitle = document.createElement('h6');\n            leaderboardTitle.classList.add('card-subtitle', 'mb-2', 'text-muted');\n            leaderboardTitle.textContent = 'Leaderboard';\n            cardBody.appendChild(leaderboardTitle);\n\n            const leaderboardElement = document.createElement('ul');\n            leaderboardElement.classList.add('list-group', 'list-group-flush');\n\n            segment.leaderboard.forEach(entry => {\n                const leaderboardItem = document.createElement('li');\n                leaderboardItem.classList.add('list-group-item');\n                leaderboardItem.textContent = `${entry.position}. ${entry.time} (${entry.pace}/km)`;\n                leaderboardElement.appendChild(leaderboardItem);\n            });\n\n            cardBody.appendChild(leaderboardElement);\n            card.appendChild(cardBody);\n            segmentElement.appendChild(card);\n\n            segmentsContainer.appendChild(segmentElement);\n        });\n    };\n\n    const applyFiltersAndSorting = () => {\n        let filteredSegments = [...allSegments];\n\n        // Filter values\n        const minDistance = parseFloat(document.getElementById('min-distance').value) || 0;\n        const maxDistance = parseFloat(document.getElementById('max-distance').value) || Infinity;\n        const minAttempts = parseInt(document.getElementById('min-attempts').value, 10) || 0;\n        const maxAttempts = parseInt(document.getElementById('max-attempts').value, 10) || Infinity;\n        const minPeople = parseInt(document.getElementById('min-people').value, 10) || 0;\n        const maxPeople = parseInt(document.getElementById('max-people').value, 10) || Infinity;\n        const minFirstPace = parseFloat(document.getElementById('min-leaderboard-first').value) || 0;\n        const maxFirstPace = parseFloat(document.getElementById('max-leaderboard-first').value) || Infinity;\n        const minLastPace = parseFloat(document.getElementById('min-leaderboard-last').value) || 0;\n        const maxLastPace = parseFloat(document.getElementById('max-leaderboard-last').value) || Infinity;\n\n        filteredSegments = filteredSegments.filter(segment => {\n            const distanceInKm = parseFloat(segment.distance) / 1000;\n            const firstPace = paceToSeconds(segment.leaderboard[0]?.pace);\n            const lastPace = paceToSeconds(segment.leaderboard[segment.leaderboard.length - 1]?.pace);\n\n            return distanceInKm >= minDistance &&\n                distanceInKm <= maxDistance &&\n                segment.attempts.attempts >= minAttempts &&\n                segment.attempts.attempts <= maxAttempts &&\n                segment.attempts.people >= minPeople &&\n                segment.attempts.people <= maxPeople &&\n                firstPace >= minFirstPace &&\n                firstPace <= maxFirstPace &&\n                lastPace >= minLastPace &&\n                lastPace <= maxLastPace;\n        });\n\n        // Sort values\n        const sortBy = document.getElementById('sort-by').value;\n        const sortOrder = document.getElementById('sort-order').value;\n\n        filteredSegments.sort((a, b) => {\n            let valA, valB;\n\n            switch (sortBy) {\n                case 'distance':\n                    valA = parseFloat(a.distance);\n                    valB = parseFloat(b.distance);\n                    break;\n                case 'attempts':\n                    valA = a.attempts.attempts;\n                    valB = b.attempts.attempts;\n                    break;\n                case 'people':\n                    valA = a.attempts.people;\n                    valB = b.attempts.people;\n                    break;\n                case 'leaderboard-speed':\n                    valA = paceToSeconds(a.leaderboard[0]?.pace);\n                    valB = paceToSeconds(b.leaderboard[0]?.pace);\n                    break;\n                case 'name':\n                default:\n                    valA = a.name.toLowerCase();\n                    valB = b.name.toLowerCase();\n                    break;\n            }\n\n            if (valA < valB) {\n                return sortOrder === 'asc' ? -1 : 1;\n            }\n            if (valA > valB) {\n                return sortOrder === 'asc' ? 1 : -1;\n            }\n            return 0;\n        });\n\n        renderSegments(filteredSegments);\n    };\n\n    const localSegments = getSegmentsFromLocalFile()\n    allSegments = localSegments.filter(Boolean)\n        .filter(x => x?.attempts && Array.isArray(x?.leaderboard));\n    renderSegments(allSegments);\n    applyButton.addEventListener('click', applyFiltersAndSorting);\n});\n"],"names":["document","addEventListener","segmentsContainer","getElementById","applyButton","allSegments","paceToSeconds","pace","Infinity","parts","split","length","parseInt","renderSegments","segments","innerHTML","filter","Boolean","forEach","segment","segmentElement","createElement","classList","add","card","cardBody","nameElement","nameLink","href","id","target","textContent","name","appendChild","idElement","idLink","distanceElement","distanceInKm","parseFloat","distance","toFixed","attemptsElement","attempts","people","leaderboardTitle","leaderboardElement","leaderboard","entry","leaderboardItem","position","time","localSegments","getSegmentsFromLocalFile","x","Array","isArray","filteredSegments","minDistance","value","maxDistance","minAttempts","maxAttempts","minPeople","maxPeople","minFirstPace","maxFirstPace","minLastPace","maxLastPace","firstPace","lastPace","sortBy","sortOrder","sort","a","b","valA","valB","toLowerCase"],"version":3,"file":"public.84b96e35.js.map"}